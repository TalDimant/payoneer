name: CI workflow

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: payoneer-fe
      DOCKER_TAG: ${{ github.sha }}
      DOCKER_IMAGE_TAR: payoneer-${{ github.sha }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      DOCKER_NAME: payoneer-app
      SERVICE_PORT: 3000
    defaults:
      run:
        working-directory: ./payoneer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Angular app
        run: npm run build --omit=dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker layers
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          context: ./payoneer
          file: ./payoneer/Dockerfile
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image to tar file
        run: |
          mkdir -p /tmp/build-${{ github.sha }}
          docker save -o ../${{ env.DOCKER_IMAGE_TAR }} ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Copy Docker image tar file to EC2 instance
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ${{ env.DOCKER_IMAGE_TAR }}
          target: /tmp

      - name: SSH into EC2 instance and load Docker image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Load Docker image from tar file
            sudo docker load -i /tmp/${{ env.DOCKER_IMAGE_TAR }}
            # Check if container exists
            if [ "$(sudo docker ps -a -q -f name=${{ env.DOCKER_NAME }})" ]; then
              # Stop and remove the existing container
              sudo docker rm -f ${{ env.DOCKER_NAME }}
            fi
            # Run Docker container from the loaded image
            sudo docker run -d --name ${{ env.DOCKER_NAME }} -p ${{ SERVICE_PORT }}:80 ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}